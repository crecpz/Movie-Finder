@use "./function" as *;
@use "./break-point" as *;
@use "./map" as *;

// flex
@mixin flex($dir: row, $jc: flex-start, $ai: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $dir;
  justify-content: $jc;
  align-items: $ai;
  flex-wrap: $wrap;
}

// 檢查裝置是否支援hover，若有支援才執行此
@mixin hover-query() {
  @media (hover: hover) {
    @content;
  }
}

// 設成圓形
@mixin rounded-full {
  border-radius: 50%;
}

// 重置按鈕樣式
@mixin button-reset {
  background-color: transparent;
  border: 0;
  padding: 0;
  cursor: pointer;
}

// 用於設定文字大小
@mixin text($size) {
  font-size: deep-map-get($text, size, $size);
}

// 放入基本顏色，並以該顏色為基礎，將其暗化 20%，若其已經是最暗，則亮化 20%
@mixin hover-bg-color($current-bg-color) {
  @if (darken($current-bg-color, 20) == $current-bg-color) {
    background-color: lighten($current-bg-color, 20);
  } @else {
    background-color: darken($current-bg-color, 20);
  }
}

// 放入基本顏色，並以該顏色為基礎，將其暗化 20%，若其已經是最暗，則亮化 20%
@mixin hover-color($current-color) {
  @if (darken($current-color, 20) == $current-color) {
    color: lighten($current-color, 20);
  } @else {
    color: darken($current-color, 20);
  }
}

// 全局左右 padding
@mixin x-spacing {
  padding-left: map-get($x-spacing, lg);
  padding-right: map-get($x-spacing, lg);

  @include md {
    padding-left: map-get($x-spacing, sm);
    padding-right: map-get($x-spacing, sm);
  }
}

// <main> 內 layout 共同設定，目前使用於 New, Popular, Genres, Watchlist 頁面
@mixin main-layout {
  @include x-spacing;
  padding-top: calc(#{deep-map-get($height, header, lg)} + 3rem);
  padding-bottom: 3rem;
}

//* 將某一個元素的所有直接子元素出現時加上淡入效果
// - 需使用 .appear 來加進該元素當中才會觸發效果
@mixin transition-appear($amount) {
  // 選中元素的所有的子層
  & > :nth-child(n) {
    opacity: 0;
    transform: translateY(-1.25rem);
    transition: map-get($transition, 800), map-get($transition, 1000);
    transition-property: transform, opacity;
  }
  // 按照子層數量 $i，依序增加 transition-delay
  @for $i from 1 through $amount {
    & > :nth-child(#{$i}) {
      transition-delay: $i * 150ms, $i * 200ms;
    }
  }
  // 出現時樣式
  &.appear {
    & > :nth-child(n) {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

//* 卡片容器 mixin
//- 使用於 New, Popular, Genres, watchlist
//$column-gap 參數: 在容器上定義卡片之間的 column-gap
@mixin cards($column-gap) {
  @include flex($wrap: wrap);
  column-gap: $column-gap;
}

//* 卡片 mixin
//@ $column-gap(sass variable): 卡片之間的 column-gap
//@ $card-amount(sass map): 列出每個 breakpoint 一列有幾個 gap
//@ $gap-amount(sass map): 列出每個 breakpoint 每列要容納幾張卡片
// 每張卡片的寬度 = (100% / 每列的卡片張數) - ((指定的 gap 大小 * gap 總數) / 每列的卡片張數)
@mixin card($column-gap, $card-amount, $gap-amount) {
  width: 100%;
  max-width: calc(
    (100% / map-get($card-amount, default)) -
      ($column-gap * map-get($gap-amount, default) / map-get($card-amount, default))
  );
  @include xl {
    max-width: calc(
      (100% / map-get($card-amount, xl)) - ($column-gap * map-get($gap-amount, xl) / map-get($card-amount, xl))
    );
  }
  @include lg {
    max-width: calc(
      (100% / map-get($card-amount, lg)) - ($column-gap * map-get($gap-amount, lg) / map-get($card-amount, lg))
    );
  }
  @include md {
    max-width: calc(
      (100% / map-get($card-amount, md)) - ($column-gap * map-get($gap-amount, md) / map-get($card-amount, md))
    );
  }
  @include sm {
    max-width: calc(
      (100% / map-get($card-amount, sm)) - ($column-gap * map-get($gap-amount, sm) / map-get($card-amount, sm))
    );
  }
}

//* 製作出 hamburger 按鈕
//- 先將 HTML 結構: 父層放入 `hamburger` class，子層放入 3 個 <div className="hamburger__line">。
//! 注意單位的使用，單位要統一，否則無法計算。
//@ $width hamburger 的寬度(width)
//@ $line-thickness 線條的粗細(height)
//@ $line-gap 每一個線條的距離(row-gap)
//@ $line-color 線條的顏色(background-color)
@mixin hamburger($width, $line-thickness, $line-gap, $line-color) {
  .hamburger {
    @include flex($dir: column, $ai: center, $jc: center);
    row-gap: $line-gap;

    &__line {
      width: $width;
      height: $line-thickness;
      transition: map-get($transition, 300);
      transition-property: transform, opacity;
      background-color: $line-color;
      pointer-events: none;
    }

    &.active .hamburger__line {
      &:nth-child(1) {
        transform: translateY($line-thickness + $line-gap) rotate(45deg);
      }
      &:nth-child(2) {
        transform: rotate(0);
        opacity: 0;
      }
      &:nth-child(3) {
        transform: translateY(-($line-thickness + $line-gap)) rotate(-45deg);
      }
    }
  }
}
